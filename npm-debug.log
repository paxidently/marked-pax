0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/pax/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/pax/.npm/marked-pax/0.3.2/package.tgz', '.' ]
12 verbose tarball /home/pax/.npm/marked-pax/0.3.2/package.tgz
13 verbose folder .
14 info prepublish marked-pax@0.3.2
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/pax/.npm/1f1177db-tar.lock
17 silly lockFile 3dbdb069-npm-marked-pax-0-3-2-package-tgz tar:///home/pax/.npm/marked-pax/0.3.2/package.tgz
18 verbose lock tar:///home/pax/.npm/marked-pax/0.3.2/package.tgz /home/pax/.npm/3dbdb069-npm-marked-pax-0-3-2-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 3dbdb069-npm-marked-pax-0-3-2-package-tgz tar:///home/pax/.npm/marked-pax/0.3.2/package.tgz
22 silly lockFile 3dbdb069-npm-marked-pax-0-3-2-package-tgz tar:///home/pax/.npm/marked-pax/0.3.2/package.tgz
23 silly lockFile 4a337d9c-pax-npm-marked-pax-0-3-2-package /home/pax/.npm/marked-pax/0.3.2/package
24 verbose lock /home/pax/.npm/marked-pax/0.3.2/package /home/pax/.npm/4a337d9c-pax-npm-marked-pax-0-3-2-package.lock
25 silly lockFile 4a337d9c-pax-npm-marked-pax-0-3-2-package /home/pax/.npm/marked-pax/0.3.2/package
26 silly lockFile 4a337d9c-pax-npm-marked-pax-0-3-2-package /home/pax/.npm/marked-pax/0.3.2/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'marked-pax',
29 silly publish   description: 'A markdown parser built for speed',
29 silly publish   author: { name: 'Yuri Hater', email: 'paxidently@yandex.com' },
29 silly publish   version: '0.3.2',
29 silly publish   main: './lib/marked-pax.js',
29 silly publish   bin: { 'marked-pax': './bin/marked-pax' },
29 silly publish   man: [ './man/marked-pax.1' ],
29 silly publish   preferGlobal: true,
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'git://github.com/paxidently/marked-pax.git' },
29 silly publish   homepage: 'https://github.com/paxidently/marked-pax',
29 silly publish   bugs: { url: 'http://github.com/paxidently/marked-pax/issues' },
29 silly publish   license: 'MIT',
29 silly publish   keywords: [ 'markdown', 'markup', 'html' ],
29 silly publish   tags: [ 'markdown', 'markup', 'html' ],
29 silly publish   dependencies: { katex: '0.1.x', xregexp: '2.0.x' },
29 silly publish   devDependencies: { markdown: '*', showdown: '*', robotskirt: '*' },
29 silly publish   scripts: { test: 'node test', bench: 'node test --bench' },
29 silly publish   readme: '# marked-pax\n\nmarked-pax is augmented version of [marked](https://github.com/chjj/marked).\n\n## Changes\n\n### GFM-style headers\n\nOriginal behaviour:\n\n````bash\n$ echo \'#foo\' | marked\n<h1 id="foo">foo</h1>\n\n````\n\nGFM-style:\n\n````bash\n$ echo \'\n#Header\n# Header\n#  Header\n\' | marked-pax\n<p>#Header</p>\n<h1 id="header">Header</h1>\n<h1 id="header">Header</h1>\n\n````\n\n### &tl; and &gt; escapes\n\nSource: \'\\<\\>\', result: \'&lt;&gt;\'.\n\n## New syntax\n\n### Headers with anchors\n\nSource:\n\n````markdown\n# ^chapter-1 Случайный Юпитер — актуальная национальная задача\n\n^chapter2 Астероидный возмущающий фактор в XXI веке\n===================================================\n````\n\n````html\n<h1 id="chapter-1">Случайный Юпитер — актуальная национальная задача</h1>\n<h1 id="chapter2">Астероидный возмущающий фактор в XXI веке</h1>\n````\n\nRenderer method: `heading (text, level, raw, anchor)`\n\n### [KaTeX](http://khan.github.io/KaTeX) formulas\n\nSource:\n\n````markdown\n$\n\\KaTeX\n$\n\n$\\text{[links](not works)}$\n````\n\nResult:\n\n````html\n<p><span class="katex"><span class="katex-inner"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:1.0302031249999999em;vertical-align:-0.34687312499999995em;"></span><span class="base textstyle uncramped"><span class="katex-logo"><span class="k">K</span><span class="a">A</span><span class="t">T</span><span class="e">E</span><span class="x">X</span></span></span></span></span></p>\n<p><span class="katex"><span class="katex-inner"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="text mord textstyle uncramped"><span class="mord">[</span><span class="mord">l</span><span class="mord">i</span><span class="mord">n</span><span class="mord">k</span><span class="mord">s</span><span class="mord">]</span><span class="mord">(</span><span class="mord">n</span><span class="mord">o</span><span class="mord">t</span><span class="mord mspace"> </span><span class="mord" style="margin-right:0.01389em;">w</span><span class="mord">o</span><span class="mord">r</span><span class="mord">k</span><span class="mord">s</span><span class="mord">)</span></span></span></span></span></p>\n````\n\nRenderer method: `katex (source)`\n\n### Colored text\n\nSupported all CSS-compatible color notations:\n\n *  `#rrggbb`\n *  `#rgb`\n *  `rgb(r, g, b)`\n *  `rgb(r%, g%, b%)`\n *  `rgba(r, g, b, a)`\n *  `rgba(r%, g%, b%, a)`\n *  `hsl(h, s, l)`\n *  `hsl(h%, s%, l%)`\n *  `hsla(h, s, l, a)`\n *  `hsla(h%, s%, l%, a)`\n *  `colorName`\n\n#### Text color\n\nSource:\n\n````markdown\n%red Red text%\n````\n\nResult:\n\n````html\n<p><span style="color:red">Red text</span></p>\n````\n\nRenderer method: `color (color, text)`\n\n#### Background color\n\nSource:\n\n````markdown\n!%yellow Yellow background%\n````\n\nResult:\n\n````html\n<p><span style="background-color:yellow">Yellow background</span></p>\n````\n\nRenderer method: `bg (color, text)`\n\n### Ruby (furigana) and glosses\n\n### Ruby\n\nSource:\n\n````markdown\n{東}(とう){方}(とう)\n````\n\nResult:\n\n````html\n<p><ruby>東<rt>とう</rt></ruby><ruby>方<rt>とう</rt></ruby></p>\n````\n\nRenderer method: `ruby (color, ruby)`\n\n### Glosses\n\nSource:\n\n````markdown\n!{Word or phrase}(Pop-up description)\n````\n\nResult:\n\n````html\n<p><span class="gloss" title="Pop-up description">Word or phrase</span></p>\n````\n\nRenderer method: `gloss (color, gloss)`\n\nNB: By default, HTML in glosses not supported. You may override default renderer method\nfor supporting custom pop-ups.\n\n### Empty anchors\n\nSource:\n\n````markdown\n *  Item 1\n *  Item 2\n *  ^item-3 Item 3\n     *  Item 3.1\n     *  Item 3.2\n````\n\nResult:\n\n````html\n<ul>\n<li>Item 1</li>\n<li>Item 2</li>\n<li><span id="item-3" />Item 3<ul>\n<li>Item 3.1</li>\n<li>Item 3.2</li>\n</ul>\n</li>\n</ul>\n````\n\nRenderer method: `anchor (id)`\n\n## TODO\n\n *  Hashtags: `#hashtag`.\n *  Total rewrite with XRegExp library.\n *  Add support for Japanese punctuation.\n\n## Usage\n\nMinimal usage:\n\n```js\nvar marked = require(\'marked-pax\');\nconsole.log(marked(\'I am using __markdown__.\'));\n// Outputs: <p>I am using <strong>markdown</strong>.</p>\n```\n\nExample setting options with default values:\n\n```js\nvar marked = require(\'marked-pax\');\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: true,\n  smartLists: true,\n  smartypants: false\n});\n\nconsole.log(marked(\'I am using __markdown__.\'));\n```\n\n### Browser\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset="utf-8"/>\n  <title>Marked in the browser</title>\n  <script src="lib/marked-pax.js"></script>\n</head>\n<body>\n  <div id="content"></div>\n  <script>\n    document.getElementById(\'content\').innerHTML =\n      marked(\'# Marked in browser\\n\\nRendered by **marked**.\');\n  </script>\n</body>\n</html>\n```\n\nResult:\n\n````html\n<h1 id="chapter-1">Случайный Юпитер — актуальная национальная задача</h1>\n<h1 id="chapter2">Астероидный возмущающий фактор в XXI веке</h1>\n````\n\n# marked\n\n> A full-featured markdown parser and compiler, written in JavaScript. Built\n> for speed.\n\n## marked(markdownString [,options] [,callback])\n\n### markdownString\n\nType: `string`\n\nString of markdown source to be compiled.\n\n### options\n\nType: `object`\n\nHash of options. Can also be set using the `marked.setOptions` method as seen\nabove.\n\n### callback\n\nType: `function`\n\nFunction called when the `markdownString` has been fully parsed when using\nasync highlighting. If the `options` argument is omitted, this can be used as\nthe second argument.\n\n## Options\n\n### highlight\n\nType: `function`\n\nA function to highlight code blocks. The first example below uses async highlighting with\n[node-pygmentize-bundled][pygmentize], and the second is a synchronous example using\n[highlight.js][highlight]:\n\n```js\nvar marked = require(\'marked\');\n\nvar markdownString = \'```js\\n console.log("hello"); \\n```\';\n\n// Async highlighting with pygmentize-bundled\nmarked.setOptions({\n  highlight: function (code, lang, callback) {\n    require(\'pygmentize-bundled\')({ lang: lang, format: \'html\' }, code, function (err, result) {\n      callback(err, result.toString());\n    });\n  }\n});\n\n// Using async version of marked\nmarked(markdownString, function (err, content) {\n  if (err) throw err;\n  console.log(content);\n});\n\n// Synchronous highlighting with highlight.js\nmarked.setOptions({\n  highlight: function (code) {\n    return require(\'highlight.js\').highlightAuto(code).value;\n  }\n});\n\nconsole.log(marked(markdownString));\n```\n\n#### highlight arguments\n\n`code`\n\nType: `string`\n\nThe section of code to pass to the highlighter.\n\n`lang`\n\nType: `string`\n\nThe programming language specified in the code block.\n\n`callback`\n\nType: `function`\n\nThe callback function to call when using an async highlighter.\n\n### renderer\n\nType: `object`\nDefault: `new Renderer()`\n\nAn object containing functions to render tokens to HTML.\n\n#### Overriding renderer methods\n\nThe renderer option allows you to render tokens in a custom manor. Here is an\nexample of overriding the default heading token rendering by adding an embedded anchor tag like on GitHub:\n\n```javascript\nvar marked = require(\'marked\');\nvar renderer = new marked.Renderer();\n\nrenderer.heading = function (text, level) {\n  var escapedText = text.toLowerCase().replace(/[^\\w]+/g, \'-\');\n\n  return \'<h\' + level + \'><a name="\' +\n                escapedText +\n                 \'" class="anchor" href="#\' +\n                 escapedText +\n                 \'"><span class="header-link"></span></a>\' +\n                  text + \'</h\' + level + \'>\';\n},\n\nconsole.log(marked(\'# heading+\', { renderer: renderer }));\n```\nThis code will output the following HTML:\n```html\n<h1>\n  <a name="heading-" class="anchor" href="#heading-">\n    <span class="header-link"></span>\n  </a>\n  heading+\n</h1>\n```\n\n#### Block level renderer methods\n\n- code(*string* code, *string* language)\n- blockquote(*string* quote)\n- html(*string* html)\n- heading(*string* text, *number*  level)\n- hr()\n- list(*string* body, *boolean* ordered)\n- listitem(*string*  text)\n- paragraph(*string* text)\n- table(*string* header, *string* body)\n- tablerow(*string* content)\n- tablecell(*string* content, *object* flags)\n\n`flags` has the following properties:\n\n```js\n{\n    header: true || false,\n    align: \'center\' || \'left\' || \'right\'\n}\n```\n\n#### Inline level renderer methods\n\n- strong(*string* text)\n- em(*string* text)\n- codespan(*string* code)\n- br()\n- del(*string* text)\n- link(*string* href, *string* title, *string* text)\n- image(*string* href, *string* title, *string* text)\n\n### gfm\n\nType: `boolean`\nDefault: `true`\n\nEnable [GitHub flavored markdown][gfm].\n\n### tables\n\nType: `boolean`\nDefault: `true`\n\nEnable GFM [tables][tables].\nThis option requires the `gfm` option to be true.\n\n### breaks\n\nType: `boolean`\nDefault: `false`\n\nEnable GFM [line breaks][breaks].\nThis option requires the `gfm` option to be true.\n\n### pedantic\n\nType: `boolean`\nDefault: `false`\n\nConform to obscure parts of `markdown.pl` as much as possible. Don\'t fix any of\nthe original markdown bugs or poor behavior.\n\n### sanitize\n\nType: `boolean`\nDefault: `false`\n\nSanitize the output. Ignore any HTML that has been input.\n\n### smartLists\n\nType: `boolean`\nDefault: `true`\n\nUse smarter list behavior than the original markdown. May eventually be\ndefault with the old behavior moved into `pedantic`.\n\n### smartypants\n\nType: `boolean`\nDefault: `false`\n\nUse "smart" typograhic punctuation for things like quotes and dashes.\n\n## Access to lexer and parser\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n## CLI\n\n``` bash\n$ marked -o hello.html\nhello world\n^D\n$ cat hello.html\n<p>hello world</p>\n```\n\n## Philosophy behind marked\n\nThe point of marked was to create a markdown compiler where it was possible to\nfrequently parse huge chunks of markdown without having to worry about\ncaching the compiled output somehow...or blocking for an unnecesarily long time.\n\nmarked is very concise and still implements all markdown features. It is also\nnow fully compatible with the client-side.\n\nmarked more or less passes the official markdown test suite in its\nentirety. This is important because a surprising number of markdown compilers\ncannot pass more than a few tests. It was very difficult to get marked as\ncompliant as it is. It could have cut corners in several areas for the sake\nof performance, but did not in order to be exactly what you expect in terms\nof a markdown rendering. In fact, this is why marked could be considered at a\ndisadvantage in the benchmarks above.\n\nAlong with implementing every markdown feature, marked also implements [GFM\nfeatures][gfmf].\n\n## Benchmarks\n\nnode v0.8.x\n\n``` bash\n$ node test --bench\nmarked completed in 3411ms.\nmarked (gfm) completed in 3727ms.\nmarked (pedantic) completed in 3201ms.\nrobotskirt completed in 808ms.\nshowdown (reuse converter) completed in 11954ms.\nshowdown (new converter) completed in 17774ms.\nmarkdown-js completed in 17191ms.\n```\n\n__Marked is now faster than Discount, which is written in C.__\n\nFor those feeling skeptical: These benchmarks run the entire markdown test suite 1000 times. The test suite tests every feature. It doesn\'t cater to specific aspects.\n\n### Pro level\n\nYou also have direct access to the lexer and parser if you so desire.\n\n``` js\nvar tokens = marked.lexer(text, options);\nconsole.log(marked.parser(tokens));\n```\n\n``` js\nvar lexer = new marked.Lexer(options);\nvar tokens = lexer.lex(text);\nconsole.log(tokens);\nconsole.log(lexer.rules);\n```\n\n``` bash\n$ node\n> require(\'marked\').lexer(\'> i am using marked.\')\n[ { type: \'blockquote_start\' },\n  { type: \'paragraph\',\n    text: \'i am using marked.\' },\n  { type: \'blockquote_end\' },\n  links: {} ]\n```\n\n## Running Tests & Contributing\n\nIf you want to submit a pull request, make sure your changes pass the test\nsuite. If you\'re adding a new feature, be sure to add your own test.\n\nThe marked test suite is set up slightly strangely: `test/new` is for all tests\nthat are not part of the original markdown.pl test suite (this is where your\ntest should go if you make one). `test/original` is only for the original\nmarkdown.pl tests. `test/tests` houses both types of tests after they have been\ncombined and moved/generated by running `node test --fix` or `marked --test\n--fix`.\n\nIn other words, if you have a test to add, add it to `test/new/` and then\nregenerate the tests with `node test --fix`. Commit the result. If your test\nuses a certain feature, for example, maybe it assumes GFM is *not* enabled, you\ncan add `.nogfm` to the filename. So, `my-test.text` becomes\n`my-test.nogfm.text`. You can do this with any marked option. Say you want\nline breaks and smartypants enabled, your filename should be:\n`my-test.breaks.smartypants.text`.\n\nTo run the tests:\n\n``` bash\ncd marked/\nnode test\n```\n\n### Contribution and License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code\nto be distributed under the MIT license. You are also implicitly verifying that\nall code is your original work. `</legalese>`\n\n## License\n\nCopyright (c) 2011-2014, Christopher Jeffrey. (MIT License)\n\nSee LICENSE for more info.\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown\n[gfmf]: http://github.github.com/github-flavored-markdown/\n[pygmentize]: https://github.com/rvagg/node-pygmentize-bundled\n[highlight]: https://github.com/isagalaev/highlight.js\n[badge]: http://badge.fury.io/js/marked\n[tables]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\n[breaks]: https://help.github.com/articles/github-flavored-markdown#newlines\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'edd3b4914463915dcfa0fe0fbd49cea91b56a3d8',
29 silly publish   _id: 'marked-pax@0.3.2',
29 silly publish   _shasum: 'ec766d512e402112dea4d1a68ff0ca7dd710bf8b',
29 silly publish   _from: '.' }
30 verbose request where is /marked-pax
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 26e92cf5ebc80cfa
33 verbose url raw /marked-pax
34 verbose url resolving [ 'https://registry.npmjs.org/', './marked-pax' ]
35 verbose url resolved https://registry.npmjs.org/marked-pax
36 verbose request where is https://registry.npmjs.org/marked-pax
37 info trying registry request attempt 1 at 11:51:27
38 http PUT https://registry.npmjs.org/marked-pax
39 http 403 https://registry.npmjs.org/marked-pax
40 verbose headers { date: 'Mon, 26 Jan 2015 08:51:28 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '20832',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-ams4126-AMS',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1422262287.634652,VS0,VE1015',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.3.2
42 error old={"name":"marked-pax","description":"A markdown parser built for speed","author":{"name":"Yuri Hater","email":"paxidently@yandex.com"},"version":"0.3.2","main":"./lib/marked-pax.js","bin":{"marked-pax":"./bin/marked-pax"},"man":["./man/marked-pax.1"],"preferGlobal":true,"repository":{"type":"git","url":"git://github.com/paxidently/marked-pax.git"},"homepage":"https://github.com/paxidently/marked-pax","bugs":{"url":"http://github.com/paxidently/marked-pax/issues"},"license":"MIT","keywords":["markdown","markup","html"],"tags":["markdown","markup","html"],"dependencies":{"katex":"0.1.x","xregexp":"2.0.x"},"devDependencies":{"markdown":"*","showdown":"*","robotskirt":"*"},"scripts":{"test":"node test","bench":"node test --bench"},"gitHead":"edd3b4914463915dcfa0fe0fbd49cea91b56a3d8","_id":"marked-pax@0.3.2","_shasum":"ec766d512e402112dea4d1a68ff0ca7dd710bf8b","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"paxidently","email":"paxidently@yandex.com"},"maintainers":[{"name":"paxidently","email":"paxidently@yandex.com"}],"dist":{"shasum":"ec766d512e402112dea4d1a68ff0ca7dd710bf8b","tarball":"http://registry.npmjs.org/marked-pax/-/marked-pax-0.3.2.tgz"}}
42 error new={"name":"marked-pax","description":"A markdown parser built for speed","author":{"name":"Yuri Hater","email":"paxidently@yandex.com"},"version":"0.3.2","main":"./lib/marked-pax.js","bin":{"marked-pax":"./bin/marked-pax"},"man":["./man/marked-pax.1"],"preferGlobal":true,"repository":{"type":"git","url":"git://github.com/paxidently/marked-pax.git"},"homepage":"https://github.com/paxidently/marked-pax","bugs":{"url":"http://github.com/paxidently/marked-pax/issues"},"license":"MIT","keywords":["markdown","markup","html"],"tags":["markdown","markup","html"],"dependencies":{"katex":"0.1.x","xregexp":"2.0.x"},"devDependencies":{"markdown":"*","showdown":"*","robotskirt":"*"},"scripts":{"test":"node test","bench":"node test --bench"},"readme":"# marked-pax\u000a\u000amarked-pax is augmented version of [marked](https://github.com/chjj/marked).\u000a\u000a## Changes\u000a\u000a### GFM-style headers\u000a\u000aOriginal behaviour:\u000a\u000a````bash\u000a$ echo '#foo' | marked\u000a<h1 id=\"foo\">foo</h1>\u000a\u000a````\u000a\u000aGFM-style:\u000a\u000a````bash\u000a$ echo '\u000a#Header\u000a# Header\u000a#  Header\u000a' | marked-pax\u000a<p>#Header</p>\u000a<h1 id=\"header\">Header</h1>\u000a<h1 id=\"header\">Header</h1>\u000a\u000a````\u000a\u000a### &tl; and &gt; escapes\u000a\u000aSource: '\\<\\>', result: '&lt;&gt;'.\u000a\u000a## New syntax\u000a\u000a### Headers with anchors\u000a\u000aSource:\u000a\u000a````markdown\u000a# ^chapter-1 Случайный Юпитер — актуальная национальная задача\u000a\u000a^chapter2 Астероидный возмущающий фактор в XXI веке\u000a===================================================\u000a````\u000a\u000a````html\u000a<h1 id=\"chapter-1\">Случайный Юпитер — актуальная национальная задача</h1>\u000a<h1 id=\"chapter2\">Астероидный возмущающий фактор в XXI веке</h1>\u000a````\u000a\u000aRenderer method: `heading (text, level, raw, anchor)`\u000a\u000a### [KaTeX](http://khan.github.io/KaTeX) formulas\u000a\u000aSource:\u000a\u000a````markdown\u000a$\u000a\\KaTeX\u000a$\u000a\u000a$\\text{[links](not works)}$\u000a````\u000a\u000aResult:\u000a\u000a````html\u000a<p><span class=\"katex\"><span class=\"katex-inner\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:1.0302031249999999em;vertical-align:-0.34687312499999995em;\"></span><span class=\"base textstyle uncramped\"><span class=\"katex-logo\"><span class=\"k\">K</span><span class=\"a\">A</span><span class=\"t\">T</span><span class=\"e\">E</span><span class=\"x\">X</span></span></span></span></span></p>\u000a<p><span class=\"katex\"><span class=\"katex-inner\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"text mord textstyle uncramped\"><span class=\"mord\">[</span><span class=\"mord\">l</span><span class=\"mord\">i</span><span class=\"mord\">n</span><span class=\"mord\">k</span><span class=\"mord\">s</span><span class=\"mord\">]</span><span class=\"mord\">(</span><span class=\"mord\">n</span><span class=\"mord\">o</span><span class=\"mord\">t</span><span class=\"mord mspace\"> </span><span class=\"mord\" style=\"margin-right:0.01389em;\">w</span><span class=\"mord\">o</span><span class=\"mord\">r</span><span class=\"mord\">k</span><span class=\"mord\">s</span><span class=\"mord\">)</span></span></span></span></span></p>\u000a````\u000a\u000aRenderer method: `katex (source)`\u000a\u000a### Colored text\u000a\u000aSupported all CSS-compatible color notations:\u000a\u000a *  `#rrggbb`\u000a *  `#rgb`\u000a *  `rgb(r, g, b)`\u000a *  `rgb(r%, g%, b%)`\u000a *  `rgba(r, g, b, a)`\u000a *  `rgba(r%, g%, b%, a)`\u000a *  `hsl(h, s, l)`\u000a *  `hsl(h%, s%, l%)`\u000a *  `hsla(h, s, l, a)`\u000a *  `hsla(h%, s%, l%, a)`\u000a *  `colorName`\u000a\u000a#### Text color\u000a\u000aSource:\u000a\u000a````markdown\u000a%red Red text%\u000a````\u000a\u000aResult:\u000a\u000a````html\u000a<p><span style=\"color:red\">Red text</span></p>\u000a````\u000a\u000aRenderer method: `color (color, text)`\u000a\u000a#### Background color\u000a\u000aSource:\u000a\u000a````markdown\u000a!%yellow Yellow background%\u000a````\u000a\u000aResult:\u000a\u000a````html\u000a<p><span style=\"background-color:yellow\">Yellow background</span></p>\u000a````\u000a\u000aRenderer method: `bg (color, text)`\u000a\u000a### Ruby (furigana) and glosses\u000a\u000a### Ruby\u000a\u000aSource:\u000a\u000a````markdown\u000a{東}(とう){方}(とう)\u000a````\u000a\u000aResult:\u000a\u000a````html\u000a<p><ruby>東<rt>とう</rt></ruby><ruby>方<rt>とう</rt></ruby></p>\u000a````\u000a\u000aRenderer method: `ruby (color, ruby)`\u000a\u000a### Glosses\u000a\u000aSource:\u000a\u000a````markdown\u000a!{Word or phrase}(Pop-up description)\u000a````\u000a\u000aResult:\u000a\u000a````html\u000a<p><span class=\"gloss\" title=\"Pop-up description\">Word or phrase</span></p>\u000a````\u000a\u000aRenderer method: `gloss (color, gloss)`\u000a\u000aNB: By default, HTML in glosses not supported. You may override default renderer method\u000afor supporting custom pop-ups.\u000a\u000a### Empty anchors\u000a\u000aSource:\u000a\u000a````markdown\u000a *  Item 1\u000a *  Item 2\u000a *  ^item-3 Item 3\u000a     *  Item 3.1\u000a     *  Item 3.2\u000a````\u000a\u000aResult:\u000a\u000a````html\u000a<ul>\u000a<li>Item 1</li>\u000a<li>Item 2</li>\u000a<li><span id=\"item-3\" />Item 3<ul>\u000a<li>Item 3.1</li>\u000a<li>Item 3.2</li>\u000a</ul>\u000a</li>\u000a</ul>\u000a````\u000a\u000aRenderer method: `anchor (id)`\u000a\u000a## TODO\u000a\u000a *  Hashtags: `#hashtag`.\u000a *  Total rewrite with XRegExp library.\u000a *  Add support for Japanese punctuation.\u000a\u000a## Usage\u000a\u000aMinimal usage:\u000a\u000a```js\u000avar marked = require('marked-pax');\u000aconsole.log(marked('I am using __markdown__.'));\u000a// Outputs: <p>I am using <strong>markdown</strong>.</p>\u000a```\u000a\u000aExample setting options with default values:\u000a\u000a```js\u000avar marked = require('marked-pax');\u000amarked.setOptions({\u000a  renderer: new marked.Renderer(),\u000a  gfm: true,\u000a  tables: true,\u000a  breaks: false,\u000a  pedantic: false,\u000a  sanitize: true,\u000a  smartLists: true,\u000a  smartypants: false\u000a});\u000a\u000aconsole.log(marked('I am using __markdown__.'));\u000a```\u000a\u000a### Browser\u000a\u000a```html\u000a<!doctype html>\u000a<html>\u000a<head>\u000a  <meta charset=\"utf-8\"/>\u000a  <title>Marked in the browser</title>\u000a  <script src=\"lib/marked-pax.js\"></script>\u000a</head>\u000a<body>\u000a  <div id=\"content\"></div>\u000a  <script>\u000a    document.getElementById('content').innerHTML =\u000a      marked('# Marked in browser\\n\\nRendered by **marked**.');\u000a  </script>\u000a</body>\u000a</html>\u000a```\u000a\u000aResult:\u000a\u000a````html\u000a<h1 id=\"chapter-1\">Случайный Юпитер — актуальная национальная задача</h1>\u000a<h1 id=\"chapter2\">Астероидный возмущающий фактор в XXI веке</h1>\u000a````\u000a\u000a# marked\u000a\u000a> A full-featured markdown parser and compiler, written in JavaScript. Built\u000a> for speed.\u000a\u000a## marked(markdownString [,options] [,callback])\u000a\u000a### markdownString\u000a\u000aType: `string`\u000a\u000aString of markdown source to be compiled.\u000a\u000a### options\u000a\u000aType: `object`\u000a\u000aHash of options. Can also be set using the `marked.setOptions` method as seen\u000aabove.\u000a\u000a### callback\u000a\u000aType: `function`\u000a\u000aFunction called when the `markdownString` has been fully parsed when using\u000aasync highlighting. If the `options` argument is omitted, this can be used as\u000athe second argument.\u000a\u000a## Options\u000a\u000a### highlight\u000a\u000aType: `function`\u000a\u000aA function to highlight code blocks. The first example below uses async highlighting with\u000a[node-pygmentize-bundled][pygmentize], and the second is a synchronous example using\u000a[highlight.js][highlight]:\u000a\u000a```js\u000avar marked = require('marked');\u000a\u000avar markdownString = '```js\\n console.log(\"hello\"); \\n```';\u000a\u000a// Async highlighting with pygmentize-bundled\u000amarked.setOptions({\u000a  highlight: function (code, lang, callback) {\u000a    require('pygmentize-bundled')({ lang: lang, format: 'html' }, code, function (err, result) {\u000a      callback(err, result.toString());\u000a    });\u000a  }\u000a});\u000a\u000a// Using async version of marked\u000amarked(markdownString, function (err, content) {\u000a  if (err) throw err;\u000a  console.log(content);\u000a});\u000a\u000a// Synchronous highlighting with highlight.js\u000amarked.setOptions({\u000a  highlight: function (code) {\u000a    return require('highlight.js').highlightAuto(code).value;\u000a  }\u000a});\u000a\u000aconsole.log(marked(markdownString));\u000a```\u000a\u000a#### highlight arguments\u000a\u000a`code`\u000a\u000aType: `string`\u000a\u000aThe section of code to pass to the highlighter.\u000a\u000a`lang`\u000a\u000aType: `string`\u000a\u000aThe programming language specified in the code block.\u000a\u000a`callback`\u000a\u000aType: `function`\u000a\u000aThe callback function to call when using an async highlighter.\u000a\u000a### renderer\u000a\u000aType: `object`\u000aDefault: `new Renderer()`\u000a\u000aAn object containing functions to render tokens to HTML.\u000a\u000a#### Overriding renderer methods\u000a\u000aThe renderer option allows you to render tokens in a custom manor. Here is an\u000aexample of overriding the default heading token rendering by adding an embedded anchor tag like on GitHub:\u000a\u000a```javascript\u000avar marked = require('marked');\u000avar renderer = new marked.Renderer();\u000a\u000arenderer.heading = function (text, level) {\u000a  var escapedText = text.toLowerCase().replace(/[^\\w]+/g, '-');\u000a\u000a  return '<h' + level + '><a name=\"' +\u000a                escapedText +\u000a                 '\" class=\"anchor\" href=\"#' +\u000a                 escapedText +\u000a                 '\"><span class=\"header-link\"></span></a>' +\u000a                  text + '</h' + level + '>';\u000a},\u000a\u000aconsole.log(marked('# heading+', { renderer: renderer }));\u000a```\u000aThis code will output the following HTML:\u000a```html\u000a<h1>\u000a  <a name=\"heading-\" class=\"anchor\" href=\"#heading-\">\u000a    <span class=\"header-link\"></span>\u000a  </a>\u000a  heading+\u000a</h1>\u000a```\u000a\u000a#### Block level renderer methods\u000a\u000a- code(*string* code, *string* language)\u000a- blockquote(*string* quote)\u000a- html(*string* html)\u000a- heading(*string* text, *number*  level)\u000a- hr()\u000a- list(*string* body, *boolean* ordered)\u000a- listitem(*string*  text)\u000a- paragraph(*string* text)\u000a- table(*string* header, *string* body)\u000a- tablerow(*string* content)\u000a- tablecell(*string* content, *object* flags)\u000a\u000a`flags` has the following properties:\u000a\u000a```js\u000a{\u000a    header: true || false,\u000a    align: 'center' || 'left' || 'right'\u000a}\u000a```\u000a\u000a#### Inline level renderer methods\u000a\u000a- strong(*string* text)\u000a- em(*string* text)\u000a- codespan(*string* code)\u000a- br()\u000a- del(*string* text)\u000a- link(*string* href, *string* title, *string* text)\u000a- image(*string* href, *string* title, *string* text)\u000a\u000a### gfm\u000a\u000aType: `boolean`\u000aDefault: `true`\u000a\u000aEnable [GitHub flavored markdown][gfm].\u000a\u000a### tables\u000a\u000aType: `boolean`\u000aDefault: `true`\u000a\u000aEnable GFM [tables][tables].\u000aThis option requires the `gfm` option to be true.\u000a\u000a### breaks\u000a\u000aType: `boolean`\u000aDefault: `false`\u000a\u000aEnable GFM [line breaks][breaks].\u000aThis option requires the `gfm` option to be true.\u000a\u000a### pedantic\u000a\u000aType: `boolean`\u000aDefault: `false`\u000a\u000aConform to obscure parts of `markdown.pl` as much as possible. Don't fix any of\u000athe original markdown bugs or poor behavior.\u000a\u000a### sanitize\u000a\u000aType: `boolean`\u000aDefault: `false`\u000a\u000aSanitize the output. Ignore any HTML that has been input.\u000a\u000a### smartLists\u000a\u000aType: `boolean`\u000aDefault: `true`\u000a\u000aUse smarter list behavior than the original markdown. May eventually be\u000adefault with the old behavior moved into `pedantic`.\u000a\u000a### smartypants\u000a\u000aType: `boolean`\u000aDefault: `false`\u000a\u000aUse \"smart\" typograhic punctuation for things like quotes and dashes.\u000a\u000a## Access to lexer and parser\u000a\u000aYou also have direct access to the lexer and parser if you so desire.\u000a\u000a``` js\u000avar tokens = marked.lexer(text, options);\u000aconsole.log(marked.parser(tokens));\u000a```\u000a\u000a``` js\u000avar lexer = new marked.Lexer(options);\u000avar tokens = lexer.lex(text);\u000aconsole.log(tokens);\u000aconsole.log(lexer.rules);\u000a```\u000a\u000a## CLI\u000a\u000a``` bash\u000a$ marked -o hello.html\u000ahello world\u000a^D\u000a$ cat hello.html\u000a<p>hello world</p>\u000a```\u000a\u000a## Philosophy behind marked\u000a\u000aThe point of marked was to create a markdown compiler where it was possible to\u000afrequently parse huge chunks of markdown without having to worry about\u000acaching the compiled output somehow...or blocking for an unnecesarily long time.\u000a\u000amarked is very concise and still implements all markdown features. It is also\u000anow fully compatible with the client-side.\u000a\u000amarked more or less passes the official markdown test suite in its\u000aentirety. This is important because a surprising number of markdown compilers\u000acannot pass more than a few tests. It was very difficult to get marked as\u000acompliant as it is. It could have cut corners in several areas for the sake\u000aof performance, but did not in order to be exactly what you expect in terms\u000aof a markdown rendering. In fact, this is why marked could be considered at a\u000adisadvantage in the benchmarks above.\u000a\u000aAlong with implementing every markdown feature, marked also implements [GFM\u000afeatures][gfmf].\u000a\u000a## Benchmarks\u000a\u000anode v0.8.x\u000a\u000a``` bash\u000a$ node test --bench\u000amarked completed in 3411ms.\u000amarked (gfm) completed in 3727ms.\u000amarked (pedantic) completed in 3201ms.\u000arobotskirt completed in 808ms.\u000ashowdown (reuse converter) completed in 11954ms.\u000ashowdown (new converter) completed in 17774ms.\u000amarkdown-js completed in 17191ms.\u000a```\u000a\u000a__Marked is now faster than Discount, which is written in C.__\u000a\u000aFor those feeling skeptical: These benchmarks run the entire markdown test suite 1000 times. The test suite tests every feature. It doesn't cater to specific aspects.\u000a\u000a### Pro level\u000a\u000aYou also have direct access to the lexer and parser if you so desire.\u000a\u000a``` js\u000avar tokens = marked.lexer(text, options);\u000aconsole.log(marked.parser(tokens));\u000a```\u000a\u000a``` js\u000avar lexer = new marked.Lexer(options);\u000avar tokens = lexer.lex(text);\u000aconsole.log(tokens);\u000aconsole.log(lexer.rules);\u000a```\u000a\u000a``` bash\u000a$ node\u000a> require('marked').lexer('> i am using marked.')\u000a[ { type: 'blockquote_start' },\u000a  { type: 'paragraph',\u000a    text: 'i am using marked.' },\u000a  { type: 'blockquote_end' },\u000a  links: {} ]\u000a```\u000a\u000a## Running Tests & Contributing\u000a\u000aIf you want to submit a pull request, make sure your changes pass the test\u000asuite. If you're adding a new feature, be sure to add your own test.\u000a\u000aThe marked test suite is set up slightly strangely: `test/new` is for all tests\u000athat are not part of the original markdown.pl test suite (this is where your\u000atest should go if you make one). `test/original` is only for the original\u000amarkdown.pl tests. `test/tests` houses both types of tests after they have been\u000acombined and moved/generated by running `node test --fix` or `marked --test\u000a--fix`.\u000a\u000aIn other words, if you have a test to add, add it to `test/new/` and then\u000aregenerate the tests with `node test --fix`. Commit the result. If your test\u000auses a certain feature, for example, maybe it assumes GFM is *not* enabled, you\u000acan add `.nogfm` to the filename. So, `my-test.text` becomes\u000a`my-test.nogfm.text`. You can do this with any marked option. Say you want\u000aline breaks and smartypants enabled, your filename should be:\u000a`my-test.breaks.smartypants.text`.\u000a\u000aTo run the tests:\u000a\u000a``` bash\u000acd marked/\u000anode test\u000a```\u000a\u000a### Contribution and License Agreement\u000a\u000aIf you contribute code to this project, you are implicitly allowing your code\u000ato be distributed under the MIT license. You are also implicitly verifying that\u000aall code is your original work. `</legalese>`\u000a\u000a## License\u000a\u000aCopyright (c) 2011-2014, Christopher Jeffrey. (MIT License)\u000a\u000aSee LICENSE for more info.\u000a\u000a[gfm]: https://help.github.com/articles/github-flavored-markdown\u000a[gfmf]: http://github.github.com/github-flavored-markdown/\u000a[pygmentize]: https://github.com/rvagg/node-pygmentize-bundled\u000a[highlight]: https://github.com/isagalaev/highlight.js\u000a[badge]: http://badge.fury.io/js/marked\u000a[tables]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\u000a[breaks]: https://help.github.com/articles/github-flavored-markdown#newlines\u000a","readmeFilename":"README.md","gitHead":"edd3b4914463915dcfa0fe0fbd49cea91b56a3d8","_id":"marked-pax@0.3.2","_shasum":"ec766d512e402112dea4d1a68ff0ca7dd710bf8b","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"paxidently","email":"paxidently@yandex.com"},"maintainers":[{"name":"paxidently","email":"paxidently@yandex.com"}],"dist":{"shasum":"ec766d512e402112dea4d1a68ff0ca7dd710bf8b","tarball":"http://registry.npmjs.org/marked-pax/-/marked-pax-0.3.2.tgz"}}: marked-pax
42 error     at RegClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
42 error     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
42 error     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Linux 3.13.0-45-generic
45 error command "/usr/bin/node" "/usr/bin/npm" "publish"
46 error cwd /tdd/projects/node/marked-pax
47 error node -v v0.10.33
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
